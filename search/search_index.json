{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intro \u00b6 Your CHANGELOG.md doesn't scale with your fancy continuous deployment process where you create multiple releases a day? Your clients can't find the changes relevant to them? Snage solves your problems by creating a searchable changelog from markdown documents describing your changes. You write one document per change containing only the gist of what's happened and snage does all the rest. No more questions about what's changed since version X.Y.Z . No more merge conflicts. Demo/Changelog \u00b6 Snage uses Snage for its own changelog. Have a look at it on changelog.snage.dev . Example Changelog Note \u00b6 Define your change in markdown with YAML frontmatter. --- issue: 21 date: 2020-04-23 audience: user type: add components: - cli version: 0.0.2 --- # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` Snage will render it as: Read more about notes here . Install \u00b6 You can install Snage in many different ways: Archlinux , NPM , Yarn , Docker or build Snage manually . Features \u00b6 Highly customizable with user defined fields Custom query language for finding change log notes Sleek web UI in material ui design Great tooling support for managing notes. Usage \u00b6 snage serve : Start the Snage server. read more snage create : Interactively create a new note. read more snage lint : Check for errors in notes. read more snage set : Set field values. read more snage find : Find notes. read more snage migrate : Migrate the .snage.yaml . read more Contributing \u00b6 Setup your development environment","title":"Intro"},{"location":"#intro","text":"Your CHANGELOG.md doesn't scale with your fancy continuous deployment process where you create multiple releases a day? Your clients can't find the changes relevant to them? Snage solves your problems by creating a searchable changelog from markdown documents describing your changes. You write one document per change containing only the gist of what's happened and snage does all the rest. No more questions about what's changed since version X.Y.Z . No more merge conflicts.","title":"Intro"},{"location":"#demochangelog","text":"Snage uses Snage for its own changelog. Have a look at it on changelog.snage.dev .","title":"Demo/Changelog"},{"location":"#example-changelog-note","text":"Define your change in markdown with YAML frontmatter. --- issue: 21 date: 2020-04-23 audience: user type: add components: - cli version: 0.0.2 --- # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` Snage will render it as: Read more about notes here .","title":"Example Changelog Note"},{"location":"#install","text":"You can install Snage in many different ways: Archlinux , NPM , Yarn , Docker or build Snage manually .","title":"Install"},{"location":"#features","text":"Highly customizable with user defined fields Custom query language for finding change log notes Sleek web UI in material ui design Great tooling support for managing notes.","title":"Features"},{"location":"#usage","text":"snage serve : Start the Snage server. read more snage create : Interactively create a new note. read more snage lint : Check for errors in notes. read more snage set : Set field values. read more snage find : Find notes. read more snage migrate : Migrate the .snage.yaml . read more","title":"Usage"},{"location":"#contributing","text":"Setup your development environment","title":"Contributing"},{"location":"config/","text":"You configure Snage using a YAML file. Snage searches for a file named .snage.yaml or .snage.yml in the current and all parent directories. You can specify a different path using the --config argument or the SNAGE_CONFIG environment variable. Let's take a quick look at a sample configuration that contains the most important features. # The version of the configuration format. version : 2 # The directory containing all the changelog notes. It is relative to the path # of the `.snage.yaml` it's defined in, except if it's an absolute path # starting with a slash. basedir : changelog template : # A template used by `snage create` for the path of new changelog notes. The # path is interpreted as relative to `basedir`. file : ${issue}-${type}.md # A default text for new changelog notes created with `snage create`. It can # guide your changelog authors. text : | # Choose a summarizing headline - Don't just copy your commit message (you can, if it's appropriate). Instead write the changelog from the audience's point of view, e.g. include the error message the user has seen. - Don't write a changelog if the change doesn't affect any of the audiences. - Are there multiple changes for different audiences in your PR? Then add multiple changelog notes. - Use active language (\"Use `ABC` to configure feature X\" instead of \"Feature X can be configured using `ABC`\") - Use present tense (\"Remove support for ...\" instead of \"Removed support for ...\") note : # Define links from your changelog entry to the corresponding Github issue, # pull request or other related information. links : - name : \"GitHub#${issue}\" link : \"https://github.com/FACT-Finder/snage/issues/${issue}\" # Defines the fields for your YAML headers. fields : - name : issue # Valid types are string, boolean, date, number, semver and ffversion. type : number - name : type type : string # You can restrict string fields to a finite set of values. enum : [ add , change , deprecate , remove , fix , security ] - name : audience type : string enum : [ user , developer ] - name : version type : semver # Some fields only make sense for some of your changes. Mark such fields # as optional. optional : true # At the time of writing a new changelog note some values might not be # known. E.g. if your continuous integration process creates a new # version after merging your pull request, you don't know the correct # version in advance. In that case you can use the `git-version` provider # which will extract the correct version from your git history when snage # renders your changelog. provided : by : 'git-version' arguments : # The regex must match your version tag and have exactly one # group extracting the version. version-regex : '^v(.*)$' - name : date type : date - name : components type : string # List fields can have multiple values. In this case a change might touch # multiple components. list : true enum : [ server , ui , cli , api , config ] optional : true filterPresets : [] standard : # The default query when opening the snage UI. The empty query shows every # changelog entry. query : \"\" # The order of the changelog entries in the snage UI. sort : field : version order : desc Explanation \u00b6 version \u00b6 version : 1 note \u00b6 note : basedir : changelog file : \"${issue}-${type}.md\" fields \u00b6 fields : - name : issue type : number filterPresets \u00b6 links \u00b6 standard \u00b6","title":"Config"},{"location":"config/#explanation","text":"","title":"Explanation"},{"location":"config/#version","text":"version : 1","title":"version"},{"location":"config/#note","text":"note : basedir : changelog file : \"${issue}-${type}.md\"","title":"note"},{"location":"config/#fields","text":"fields : - name : issue type : number","title":"fields"},{"location":"config/#filterpresets","text":"","title":"filterPresets"},{"location":"config/#links","text":"","title":"links"},{"location":"config/#standard","text":"","title":"standard"},{"location":"note/","text":"A note is the analog of an item in a CHANGELOG.md . Use it to describe a single change. Add metadata to give context. Example \u00b6 --- issue: 21 date: 2020-04-23 audience: user type: add components: - cli version: 0.0.2 --- # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` Want to see more? Have a look at the Snage notes: ./changelog Structure \u00b6 1. Metadata \u00b6 The header of the notes must start with a YAML front matter block. The block starts and ends with a triple-dashed line --- . Inside the block you can set values for fields that are defined inside the Snage config . This examples uses the config we use for the snage changelog .snage.yaml . --- issue : 21 date : 2020-04-23 audience : user type : add components : - cli version : 0.0.2 --- Validation Snage checks metadata for invalid values. See snage lint . 2. Header \u00b6 After the metadata a markdown header must follow. The header is the summary for the whole change log note. # Add `snage-lint` command 3. Content \u00b6 The optional content should describe the change in more detail. If present, content and header must be separated by an empty line. # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` The content will be interpreted as markdown. Best Practices \u00b6 Use active language (\"Use ABC to configure feature X\" instead of \"Feature X can be configured using ABC \") Use present tense (\"Remove support for ...\" instead of \"Removed support for ...\") Don't exceed 80 characters in the header","title":"Note"},{"location":"note/#example","text":"--- issue: 21 date: 2020-04-23 audience: user type: add components: - cli version: 0.0.2 --- # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` Want to see more? Have a look at the Snage notes: ./changelog","title":"Example"},{"location":"note/#structure","text":"","title":"Structure"},{"location":"note/#1-metadata","text":"The header of the notes must start with a YAML front matter block. The block starts and ends with a triple-dashed line --- . Inside the block you can set values for fields that are defined inside the Snage config . This examples uses the config we use for the snage changelog .snage.yaml . --- issue : 21 date : 2020-04-23 audience : user type : add components : - cli version : 0.0.2 --- Validation Snage checks metadata for invalid values. See snage lint .","title":"1. Metadata"},{"location":"note/#2-header","text":"After the metadata a markdown header must follow. The header is the summary for the whole change log note. # Add `snage-lint` command","title":"2. Header"},{"location":"note/#3-content","text":"The optional content should describe the change in more detail. If present, content and header must be separated by an empty line. # Add `snage lint` command You can lint all change log notes using: ```bash $ snage lint ``` The content will be interpreted as markdown.","title":"3. Content"},{"location":"note/#best-practices","text":"Use active language (\"Use ABC to configure feature X\" instead of \"Feature X can be configured using ABC \") Use present tense (\"Remove support for ...\" instead of \"Removed support for ...\") Don't exceed 80 characters in the header","title":"Best Practices"},{"location":"query/","text":"Warning Queries are highly dependent on your field config, everything here is an example and must be adjusted to your config. The examples below use our Snage config .snage.yaml You can query for all notes belonging to a specific version version = 0.0.7 Try it out or for all notes newer than a specific version version > 0.0.7 Try it out If you want to find all notes between two different versions you have to use the and operator to combine two conditions version >= 1.2.7 and version < 2.0.0 Try it out Structure \u00b6 A simple note query consists either of a field name followed by a binary operator, and a value field binaryOperator value or of a field name followed by a unary operator field unaryOperator Field \u00b6 Field may be any field name defined inside your config . Our config for Snage has fields like issue , type and version . Have a look at it here: snage: ./snage.yaml . Operator \u00b6 Unary \u00b6 Unary operators don't have a value. operator description field type absent field value is unset all field types present field value is set all field types Binary \u00b6 Binary operators compare field values of a note with values provided in the query. operator description field type = equal or contains on list all field types != not equal or not contains on list all field types > greater date , number , semver , ffversion >= greater or equal date , number , semver , ffversion < less date , number , semver , ffversion <= less or equal date , number , semver , ffversion ~ string contains string ~~ string fuzzy search string Version comparison \u00b6 Fields with type semver or ffversion aren't compared literally, if only part of the version is specified but instead will be seen as range. For fields with type semver the following rules apply: semver = 1 is the same as semver >= 1.0.0 and semver < 2.0.0 . semver 1.2 is the same as semver >= 1.2.0 and semver < 1.3.0 . semver = 1.2.3 is compared literally. semver > 1 is compared with minor and patch version implicitly set to 0 semver > 1.0.0 . For fields with type ffversion the following rules apply: ffversion = 1 is the same as ffversion >= 1.0.0-0 and ffversion < 2.0.0-0 . ffversion = 1.2 is the same as ffversion >= 1.2.0-0 and ffversion < 1.3.0-0 . ffversion = 1.2.3 is the same as ffversion >= 1.2.3-0 and ffversion < 1.2.4-0 . ffversion = 1.2.3-10 is compared literally. ffversion > 1 is compared with minor, patch and prerelease version implicitly set to 0 ffversion > 1.0.0-0 . Value \u00b6 The value depends on the field type. When you query a number field, you are only allowed to specify a number. Other values will result in a query parse error. Example \u00b6 issue = 50 type = bugfix date > = 2020 -05-05 date absent issue present Complex Queries \u00b6 Simple queries can be combined via logical and and logical or . and requires both its left and right side to evaluate to true. or requires either its left or right side to evaluate to true. issue = 5 and type = bugfix or type ! = bugfix Precedence \u00b6 and takes precendence over or , meaning that in a query like ( type = bugfix and issue = 4 ) or ( type = bugfix and issue = 5 ) you can omit the parentheses and use type = bugfix and issue = 4 or type = bugfix and issue = 5 instead. On the other hand parenthesis around or change the meaning of the query, e.g. type = bugfix and ( issue = 4 or issue = 5 ) is a different from type = bugfix and issue = 4 or issue = 5 . Quoting \u00b6 String values that contain spaces can be quoted with single or double quotes: content ~ \"throw error\"","title":"Query"},{"location":"query/#structure","text":"A simple note query consists either of a field name followed by a binary operator, and a value field binaryOperator value or of a field name followed by a unary operator field unaryOperator","title":"Structure"},{"location":"query/#field","text":"Field may be any field name defined inside your config . Our config for Snage has fields like issue , type and version . Have a look at it here: snage: ./snage.yaml .","title":"Field"},{"location":"query/#operator","text":"","title":"Operator"},{"location":"query/#unary","text":"Unary operators don't have a value. operator description field type absent field value is unset all field types present field value is set all field types","title":"Unary"},{"location":"query/#binary","text":"Binary operators compare field values of a note with values provided in the query. operator description field type = equal or contains on list all field types != not equal or not contains on list all field types > greater date , number , semver , ffversion >= greater or equal date , number , semver , ffversion < less date , number , semver , ffversion <= less or equal date , number , semver , ffversion ~ string contains string ~~ string fuzzy search string","title":"Binary"},{"location":"query/#version-comparison","text":"Fields with type semver or ffversion aren't compared literally, if only part of the version is specified but instead will be seen as range. For fields with type semver the following rules apply: semver = 1 is the same as semver >= 1.0.0 and semver < 2.0.0 . semver 1.2 is the same as semver >= 1.2.0 and semver < 1.3.0 . semver = 1.2.3 is compared literally. semver > 1 is compared with minor and patch version implicitly set to 0 semver > 1.0.0 . For fields with type ffversion the following rules apply: ffversion = 1 is the same as ffversion >= 1.0.0-0 and ffversion < 2.0.0-0 . ffversion = 1.2 is the same as ffversion >= 1.2.0-0 and ffversion < 1.3.0-0 . ffversion = 1.2.3 is the same as ffversion >= 1.2.3-0 and ffversion < 1.2.4-0 . ffversion = 1.2.3-10 is compared literally. ffversion > 1 is compared with minor, patch and prerelease version implicitly set to 0 ffversion > 1.0.0-0 .","title":"Version comparison"},{"location":"query/#value","text":"The value depends on the field type. When you query a number field, you are only allowed to specify a number. Other values will result in a query parse error.","title":"Value"},{"location":"query/#example","text":"issue = 50 type = bugfix date > = 2020 -05-05 date absent issue present","title":"Example"},{"location":"query/#complex-queries","text":"Simple queries can be combined via logical and and logical or . and requires both its left and right side to evaluate to true. or requires either its left or right side to evaluate to true. issue = 5 and type = bugfix or type ! = bugfix","title":"Complex Queries"},{"location":"query/#precedence","text":"and takes precendence over or , meaning that in a query like ( type = bugfix and issue = 4 ) or ( type = bugfix and issue = 5 ) you can omit the parentheses and use type = bugfix and issue = 4 or type = bugfix and issue = 5 instead. On the other hand parenthesis around or change the meaning of the query, e.g. type = bugfix and ( issue = 4 or issue = 5 ) is a different from type = bugfix and issue = 4 or issue = 5 .","title":"Precedence"},{"location":"query/#quoting","text":"String values that contain spaces can be quoted with single or double quotes: content ~ \"throw error\"","title":"Quoting"},{"location":"cmd/create/","text":"TODO","title":"Create"},{"location":"cmd/find/","text":"TODO","title":"Find"},{"location":"cmd/lint/","text":"todo","title":"Lint"},{"location":"cmd/migrate/","text":"TODO","title":"Migrate"},{"location":"cmd/serve/","text":"TODO","title":"Serve"},{"location":"cmd/set/","text":"TODO","title":"Set"},{"location":"dev/build/","text":"git clone ...","title":"Build"},{"location":"dev/setup/","text":"todo","title":"Setup"},{"location":"install/arch/","text":"Install snage or snage-bin from AUR. Use your favorite aur manager. In our case it is yay . yay -S snage snage help snage <command> ...","title":"Arch"},{"location":"install/docker/","text":"If you want to use docker, you can use our snage/snage image. Replace $VERSION with the latest version. Currently: loading docker run --rm snage/snage:$VERSION help snage <command> ...","title":"Docker"},{"location":"install/npm/","text":"You can install the snage npmjs package via NPM. npm install -g snage snage help snage <command> ... Note Make sure that your $PATH environment variable includes the output of $ npm bin","title":"NPM"},{"location":"install/yarn/","text":"You can install the snage npmjs package via yarn. yarn global add snage snage help snage <command> ... Note Make sure that your $PATH environment variable includes the output of $ yarn global bin","title":"Yarn"}]}